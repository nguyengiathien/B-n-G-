#include <iostream>
#include <vector>
#include <conio.h> // _kbhit() và _getch()
#include <windows.h> // Sleep() và SetConsoleTextAttribute()

using namespace std;

const int width = 20;  // Chiều rộng của màn hình
const int height = 15; // Chiều cao của màn hình
char screen[height][width]; // Màn hình game

int playerX = width / 2; // Vị trí người chơi
int playerSpeed = 1; // Tốc độ mặc định của máy bay
vector<pair<int, int>> bullets; // Danh sách đạn
vector<pair<int, int>> chickens; // Danh sách gà
vector<pair<int, int>> gifts; // Danh sách quà
bool isRunning = true; // Trạng thái game

int speedMultiplier = 1; // Hệ số tốc độ
int chickenMoveTimer = 0; // Bộ đếm để kiểm soát tốc độ rơi của gà
int giftMoveTimer = 0; // Bộ đếm để kiểm soát tốc độ rơi của quà
bool upgradedBullet = false; // Trạng thái đạn nâng cấp
int score = 0; // Điểm số
int lives = 3; // Số mạng của máy bay

HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE); // Xử lý console để thay đổi màu

void clearScreen() {
    system("cls"); // Xóa màn hình
}

void initializeScreen() {
    // Làm sạch màn hình và tạo khung
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            if (i == 0 || i == height - 1 || j == 0 || j == width - 1) {
                screen[i][j] = '+'; // Khung
            }
            else {
                screen[i][j] = ' ';
            }
        }
    }
}

void drawScreen() {
    clearScreen();
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            // Kiểm tra nếu là gà hoặc quà để thay đổi màu
            if (screen[i][j] == 'G') {
                SetConsoleTextAttribute(hConsole, 4); // Màu đỏ
                cout << screen[i][j];
                SetConsoleTextAttribute(hConsole, 7); // Trở lại màu trắng
            }
            else if (screen[i][j] == 'Q') {
                SetConsoleTextAttribute(hConsole, 14); // Màu vàng
                cout << screen[i][j];
                SetConsoleTextAttribute(hConsole, 7); // Trở lại màu trắng
            }
            else {
                cout << screen[i][j];
            }
        }
        cout << endl;
    }
    // Hiển thị điểm và số mạng
    cout << "Score: " << score << "  Lives: " << lives << endl;
}

void updatePlayer() {
    // Vẽ người chơi
    screen[height - 2][playerX] = '^';
}

void updateBullets() {
    // Di chuyển đạn
    for (auto& bullet : bullets) {
        bullet.second--; // Di chuyển đạn lên trên
    }

    // Xóa đạn vượt khỏi màn hình
    bullets.erase(remove_if(bullets.begin(), bullets.end(),
        [](pair<int, int> bullet) { return bullet.second < 1; }),
        bullets.end());

    // Vẽ đạn
    for (auto bullet : bullets) {
        screen[bullet.second][bullet.first] = '|';
    }
}

void updateChickens() {
    if (chickenMoveTimer >= 5) { // Gà chỉ rơi khi bộ đếm đạt giá trị
        // Di chuyển gà xuống dưới
        for (auto& chicken : chickens) {
            chicken.second++;
        }

        // Kiểm tra va chạm với người chơi
        for (auto& chicken : chickens) {
            if (chicken.second == height - 2 && chicken.first == playerX) {
                lives--; // Giảm mạng nếu gà chạm vào người chơi
                if (lives == 0) {
                    isRunning = false; // Kết thúc game nếu hết mạng
                }
            }
        }

        // Xóa gà vượt khỏi màn hình
        chickens.erase(remove_if(chickens.begin(), chickens.end(),
            [](pair<int, int> chicken) { return chicken.second >= height - 1; }),
            chickens.end());

        chickenMoveTimer = 0; // Đặt lại bộ đếm
    }

    // Vẽ gà
    for (auto chicken : chickens) {
        screen[chicken.second][chicken.first] = 'G';
    }
}

void updateGifts() {
    if (giftMoveTimer >= 10) { // Quà chỉ rơi khi bộ đếm đạt giá trị
        // Di chuyển quà xuống dưới
        for (auto& gift : gifts) {
            gift.second++;
        }

        // Xóa quà vượt khỏi màn hình
        gifts.erase(remove_if(gifts.begin(), gifts.end(),
            [](pair<int, int> gift) { return gift.second >= height - 1; }),
            gifts.end());

        giftMoveTimer = 0; // Đặt lại bộ đếm
    }

    // Vẽ quà
    for (auto gift : gifts) {
        screen[gift.second][gift.first] = 'Q';
    }
}

void checkCollisions() {
    for (size_t i = 0; i < bullets.size(); i++) {
        for (size_t j = 0; j < chickens.size(); j++) {
            // Kiểm tra va chạm giữa đạn và gà
            if (bullets[i].first == chickens[j].first && bullets[i].second == chickens[j].second) {
                bullets.erase(bullets.begin() + i);
                chickens.erase(chickens.begin() + j);
                score += 10; // Tăng điểm
                return;
            }
        }

        for (size_t j = 0; j < gifts.size(); j++) {
            // Kiểm tra va chạm giữa đạn và quà
            if (bullets[i].first == gifts[j].first && bullets[i].second == gifts[j].second) {
                bullets.erase(bullets.begin() + i);
                gifts.erase(gifts.begin() + j);
                upgradedBullet = true; // Nâng cấp đạn
                return;
            }
        }
    }
}

void spawnChicken() {
    // Tạo gà ở vị trí ngẫu nhiên
    int x = rand() % (width - 2) + 1; // Giới hạn trong khung
    chickens.push_back({ x, 1 });
}

void spawnGift() {
    // Tạo quà ở vị trí ngẫu nhiên
    int x = rand() % (width - 2) + 1; // Giới hạn trong khung
    gifts.push_back({ x, 1 });
}

void processInput() {
    if (_kbhit()) {
        char ch = _getch();
        if (ch == 'a' && playerX > 1) { // Phím A (di chuyển trái)
            playerX -= playerSpeed;
            if (playerX < 1) playerX = 1;
        }
        else if (ch == 'd' && playerX < width - 2) { // Phím D (di chuyển phải)
            playerX += playerSpeed;
            if (playerX > width - 2) playerX = width - 2;
        }
        else if (ch == ' ') { // Bắn đạn
            bullets.push_back({ playerX, height - 3 });
            if (upgradedBullet) { // Đạn nâng cấp bắn thêm 2 tia
                if (playerX > 1) bullets.push_back({ playerX - 1, height - 3 });
                if (playerX < width - 2) bullets.push_back({ playerX + 1, height - 3 });
            }
        }
        else if (ch == 's') { // Tăng tốc độ
            playerSpeed = 2;
        }
        else if (ch == 'r') { // Đặt lại tốc độ
            playerSpeed = 1;
        }
        else if (ch == 'q') { // Thoát game
            isRunning = false;
        }
    }
}

void chooseSpeed() {
    cout << "Chon che do choi (1: Cham, 2: Trung Binh, 3: Nhanh): ";
    cin >> speedMultiplier;

    if (speedMultiplier < 1 || speedMultiplier > 3) {
        speedMultiplier = 1; // Mặc định là chậm
    }
}

int main() {
    srand(static_cast<unsigned>(time(0))); // Khởi tạo seed cho random

    chooseSpeed(); // Người chơi chọn chế độ chơi

    int spawnTimer = 0;

    while (isRunning) {
        initializeScreen(); // Làm mới màn hình

        if (spawnTimer >= 10 / speedMultiplier) { // Tạo gà và quà dựa trên tốc độ
            spawnChicken();
            if (rand() % 5 == 0) { // 20% tạo quà
                spawnGift();
            }
            spawnTimer = 0;
        }

        updatePlayer();
        updateBullets();
        updateChickens();
        updateGifts();
        checkCollisions();
        drawScreen();
        processInput();

        spawnTimer++;
        chickenMoveTimer++;
        giftMoveTimer++;

        Sleep(100 / speedMultiplier); // Điều chỉnh tốc độ khung hình
    }

    cout << "Game Over! Your Score: " << score << endl;

    return 0;
}
