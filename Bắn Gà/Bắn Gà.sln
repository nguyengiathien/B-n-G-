#include <iostream>
#include <vector>
#include <conio.h> // _kbhit() và _getch()
#include <windows.h> // Sleep() và SetConsoleTextAttribute()

using namespace std;

const int width = 20;  // Chiều rộng của màn hình
const int height = 15; // Chiều cao của màn hình
char screen[height][width]; // Màn hình game

HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE); // Xử lý console để thay đổi màu

class GameObject {
public:
    int x, y;
    char shape;

    GameObject(int x, int y, char shape) : x(x), y(y), shape(shape) {}
    virtual void move() = 0;
};

class Player : public GameObject {
public:
    int speed;

    Player(int x, int y, char shape) : GameObject(x, y, shape), speed(1) {}

    void move() override {
        // Player movement is handled in processInput()
    }
};

class Bullet : public GameObject {
public:
    Bullet(int x, int y, char shape) : GameObject(x, y, shape) {}

    void move() override {
        y--;
    }
};

class Gift : public GameObject {
public:
    Gift(int x, int y, char shape) : GameObject(x, y, shape) {}

    void move() override {
        y++;
    }
};

class Enemy : public GameObject {
public:
    Enemy(int x, int y, char shape) : GameObject(x, y, shape) {}

    void move() override {
        y++;
    }
};

class Chicken : public Enemy {
public:
    Chicken(int x, int y, char shape) : Enemy(x, y, shape) {}
};

Player player(width / 2, height - 2, '^');
vector<Bullet> bullets;
vector<Chicken> chickens;
vector<Gift> gifts;
bool isRunning = true;
bool upgradedBullet = false;
int score = 0;
int lives = 3;
int speedMultiplier = 1;
int chickenMoveTimer = 0;
int giftMoveTimer = 0;

void clearScreen() {
    system("cls"); // Xóa màn hình
}

void initializeScreen() {
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            if (i == 0 || i == height - 1 || j == 0 || j == width - 1) {
                screen[i][j] = '+';
            }
            else {
                screen[i][j] = ' ';
            }
        }
    }
}

void drawScreen() {
    clearScreen();
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            // Kiểm tra nếu là gà hoặc quà để thay đổi màu
            if (screen[i][j] == 'G') {
                SetConsoleTextAttribute(hConsole, 4); // Màu đỏ
                cout << screen[i][j];
                SetConsoleTextAttribute(hConsole, 7); // Trở lại màu trắng
            }
            else if (screen[i][j] == 'Q') {
                SetConsoleTextAttribute(hConsole, 14); // Màu vàng
                cout << screen[i][j];
                SetConsoleTextAttribute(hConsole, 7); // Trở lại màu trắng
            }
            else {
                cout << screen[i][j];
            }
        }
        cout << endl;
    }
    cout << "Score: " << score << "  Lives: " << lives << endl;
}

void updatePlayer() {
    screen[player.y][player.x] = player.shape;
}

void updateBullets() {
    for (auto& bullet : bullets) {
        bullet.move();
    }

    bullets.erase(remove_if(bullets.begin(), bullets.end(),
        [](Bullet& bullet) { return bullet.y < 1; }), bullets.end());

    for (auto& bullet : bullets) {
        screen[bullet.y][bullet.x] = bullet.shape;
    }
}

void updateChickens() {
    if (chickenMoveTimer >= 5) {
        for (auto& chicken : chickens) {
            chicken.move();
        }

        for (auto& chicken : chickens) {
            if (chicken.y == player.y && chicken.x == player.x) {
                lives--;
                if (lives == 0) {
                    isRunning = false;
                }
            }
        }

        chickens.erase(remove_if(chickens.begin(), chickens.end(),
            [](Chicken& chicken) { return chicken.y >= height - 1; }), chickens.end());

        chickenMoveTimer = 0;
    }

    for (auto& chicken : chickens) {
        screen[chicken.y][chicken.x] = chicken.shape;
    }
}

void updateGifts() {
    if (giftMoveTimer >= 10) {
        for (auto& gift : gifts) {
            gift.move();
        }

        gifts.erase(remove_if(gifts.begin(), gifts.end(),
            [](Gift& gift) { return gift.y >= height - 1; }), gifts.end());

        giftMoveTimer = 0;
    }

    for (auto& gift : gifts) {
        screen[gift.y][gift.x] = gift.shape;
    }
}

void checkCollisions() {
    for (size_t i = 0; i < bullets.size(); i++) {
        for (size_t j = 0; j < chickens.size(); j++) {
            if (bullets[i].x == chickens[j].x && bullets[i].y == chickens[j].y) {
                bullets.erase(bullets.begin() + i);
                chickens.erase(chickens.begin() + j);
                score += 10;
                return;
            }
        }

        for (size_t j = 0; j < gifts.size(); j++) {
            if (bullets[i].x == gifts[j].x && bullets[i].y == gifts[j].y) {
                bullets.erase(bullets.begin() + i);
                gifts.erase(gifts.begin() + j);
                upgradedBullet = true;
                score += 10;
                return;
            }
        }
    }
}

void spawnChicken() {
    int x = rand() % (width - 2) + 1;
    chickens.emplace_back(x, 1, 'G');
}

void spawnGift() {
    int x = rand() % (width - 2) + 1;
    gifts.emplace_back(x, 1, 'Q');
}

void processInput() {
    if (_kbhit()) {
        char ch = _getch();
        if (ch == 'a' && player.x > 1) {
            player.x -= player.speed;
        }
        else if (ch == 'd' && player.x < width - 2) {
            player.x += player.speed;
        }
        else if (ch == ' ') {
            bullets.emplace_back(player.x, height - 3, '|');
            if (upgradedBullet) {
                if (player.x > 1) bullets.emplace_back(player.x - 1, height - 3, '|');
                if (player.x < width - 2) bullets.emplace_back(player.x + 1, height - 3, '|');
            }
        }
        else if (ch == 's') {
            player.speed = 2;
        }
        else if (ch == 'r') {
            player.speed = 1;
        }
        else if (ch == 'q') {
            isRunning = false;
        }
    }
}

void chooseSpeed() {
    cout << "Chon che do choi (1: Cham, 2: Trung Binh, 3: Nhanh): ";
    cin >> speedMultiplier;

    if (speedMultiplier < 1 || speedMultiplier > 3) {
        speedMultiplier = 1; // Mặc định là chậm
    }
}

int main() {
    srand(static_cast<unsigned>(time(0))); // Khởi tạo seed cho random

    chooseSpeed(); // Người chơi chọn chế độ chơi

    int spawnTimer = 0;

    while (isRunning) {
        initializeScreen(); // Làm mới màn hình

        if (spawnTimer >= 10 / speedMultiplier) { // Tạo gà và quà dựa trên tốc độ
            spawnChicken();
            if (rand() % 5 == 0) { // 20% tạo quà
                spawnGift();
            }
            spawnTimer = 0;
        }

        updatePlayer();
        updateBullets();
        updateChickens();
        updateGifts();
        checkCollisions();
        drawScreen();
        processInput();

        spawnTimer++;
        chickenMoveTimer++;
        giftMoveTimer++;

        Sleep(100 / speedMultiplier); // Điều chỉnh tốc độ khung hình
    }

    cout << "Game Over! Your Score: " << score << endl;

    return 0;
}
